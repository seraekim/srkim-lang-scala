package chapter21

/**
 * 21.4 호출 대상 객체 변환
 * 
 *  - 호출 대상 객체 변환을 통해 새 클래스를 기존 클래스 계층구조에 매끄럽게 통합할 수 있다.
 *  - 언어 안에서 도메인 특화 언어DSL를 만드는 일을 지원한다.
 *  
 *  1. 새 타입과 함께 통합하기
 *  
 *  새로운 타입을 마치 기존 타입의 인스턴스처럼 사용할 수 있다.
 *  
 *  6장 Rational 클래스를 살펴보자. 1 + new Rational(1,2) 같은 식은
 *  대상 객체 1에 적당한 + 메소드가 없기 때문에 처리하기가 약간 어렵다.
 *  Int를 Rational로 변경하는 암시적 변환을 정의할 필요가 있다.
 *  
 *  implicit def int2Rational(x: Int) = new Rational(x, 1)
 *  
 *  2. 새로운 문법 흉내 내기
 *  
 *  새 문법을 추가한 것처럼 흉내낼 수 있다.
 *  
 *  Map(1 ->  "one", 2 -> "two", 3 -> "three")
 *  -> 를 어떻게 지원하는지 궁금해한적이 있는가? 이건 문법이 아니다! 표준 스칼라 프리엠블(scala.Predef)에 있는
 *  ArrowAssoc 클래스의 메소드다. 프리엠블에는 Any에서 ArrowAssoc로 보내는 암시적 변환도 있다.
 *  
 *  1 -> "One" 이라는 표현식을 쓰면, 컴파일러는 1을 ArrowAssoc로 바꾸는 암시적 변환을 추가해서 -> 메소드를
 *  찾을 수 있게 만든다.
 *  
 *  2.10 부터는 암시적 클래스가 생겼다. 클래스 정의 시 앞에 implicit를 붙이면 그 클래스의 생성자를 암시적 변환에
 *  사용한다. 본문의 ->에 대해서도, 스칼라 2.10에서는 프리엠블에 any2ArrowAssoc를 두는 대신, 아예
 *  ArrowAssoc 클래스 자체를 암시적으로 만들었다. ArrowAssoc 클래스에는 Any 타입을 받는 생성자가 있어서
 *  모든 타입의 객체를 ArrwoAssoc 타입으로 바꿔준다.
 */
object c21_i04 {
  
}