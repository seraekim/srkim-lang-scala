package chapter05

/**
 * 5.8 연산자 우선순위와 결합법칙
 */
object c05_i08 {
  def main(args: Array[String]): Unit = {
    /*
     * 스칼라의 연산자는 메소드인데 어째서 일반적인 우선순위가 적용될까?
     * 메소드의 첫글자를 보고 우선순위를 결정
     * 그 밖의 모든 특수문자
     * * / %
     * +=
     * :
     * =!
     * <>
     * &
     * ^
     * |
     * 모든문자
     * 모든할당연산자
     */
    println(2 + 2 * 7)
    println((2 + 2) * 7)
    
    /*
     * <<의 시작문자는 <로 +- 연산자보다 우선순위가 낮다.
     */
    2 + 2 << 2
    
    /*
     * 할당연산자 = 로 쓰이면 예외이다.
     * *= 는 *로 시작되지만 가장 우선 순위가 낮다.
     */
    var x, y = 1
    x *= y + 1
    
    // 연산자 결합 법칙과 관계없이, 각 연산자의 피연산자를 계산할 때는 항상 왼쪽을 오른쪽 보다 먼저한다.
    // ::: 의 경우 결과만 보자면 b가 선행되고 a를 앞으로 append하는 느낌이겠지만...
    val a = Nil
    val b = Nil
    a ::: b
    val c = a; b.:::(c)
    // : 는 오른쪽부터 왼쪽으로 짝을 지어 나감
    a ::: b ::: c // a ::: (b ::: c)
  }
}