package chapter27

/**
 * 27장 애노테이션
 * 
 * 애노테이션은 프로그램 소스 코드에 추가한 구조화된 정보다. 주석과 마찬가지로 여기저기에 들어간다.
 * 변수, 메소드, 표현식, 또는 다른 프로그램 구성요소에 덧붙일 수 있다. 주석과 달리 애노테이션은
 * 구조가 있다. 따라서 기계가 처리하기 쉽다.
 * 
 * 애노테이션 처리 도구를 새로 만드는 방법은 이 책의 범위 밖이므로 설명하지 않는다.
 * 31장에서 한 가지 기법을 보여줄 테지만, 유일한 방법은 아니다. 애노테이션 도구를 만들기 보다는 애노테이션을
 * 사용하는게 더 일반적이다.
 * 
 * 27.1 애노테이션이 왜 필요한가?
 * 
 * 컴파일해서 실행하는 것 이외에도 할 수 있는게 많다.
 * 
 *  - 1. Scaladoc과 같이 자동 문서 생성
 *  - 2. 원하는 스타일로 코드를 보기 좋게 출력
 *  - 3. 실행 경로에 따라 닫지 않는 경우가 있는지 등 일반적 오류가 있는지 검사
 *  - 4. 실험적인 타입 검사 시도
 *
 * 이런 도구를 메타 프로그래밍 도구라 부른다. 다른 프로그램을 입력으로 취급하기 때문이다.
 * 애노테이션을 사용하게 되면 다음과 같이 향상할 수 있다.
 * 
 *  - 1. 문서 생성기는 특정 메소드가 사용금지되었음을 안다.
 *  - 2. 그대로 출력하도록 서식화 출력기에 지시
 *  - 3. 닫지 않은 파일을 검사하는 프로그램에게 특정 파일을 무시하도록 지시
 *  - 4. 지정한 메소드에 부수 효과가 있는지 검사하도록 지시
 *  
 * 이론적으로 프로그래밍 언어에서 추가 정보를 넣을 방법을 제공하도록 만드는 일이 가능하지만, 메타 프로그래밍의
 * 종류가 너무나 많다. 최소한의 지원만을 해야할텐데 그것이 애노테이션 시스템이다.
 */
object c27_i01 {
  
}