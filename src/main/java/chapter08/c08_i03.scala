package chapter08

/**
 * 8.3 1급 계층 함수
 * 
 * 1급 계층 : 사회 계층에 빗대 제약 없는 값을 일컫는 말
 *  - 1. 본문에 있는 대로 할당
 *  - 2. 인자로 넘김
 *  - 3. 함수에서 반환이 가능
 *  
 * ex 1) C 언어의 함수는, 호출할 수 있고, 함수포인터를 전달, 할당 할 수 있으나,
 * 함수를 실행시점에 만들어서 반환하는 것이 안되기 때문에 2급이다.
 * 
 * ex 2) 자바의 클래스는 자바 객체와 달리 1급 계층이 아니다. 실행 시점에 새로운 클래스 못 만든다.
 * 
 * 이름 없이 리터럴로 표기해 값처럼 주고받을 수 있다.
 * 
 * 함수 리터럴은 클래스로 컴파일하는데, 해당 클래스를 실행 시점에 인스턴스화하면 함수 값(function value)
 * 이 된다.
 * 
 * 함수 리터럴과 함수 값의 차이는
 * 함수 리터럴은 소스 코드에 존재하는 반면,
 * 함수 값은 실행 시점에 객체로 존재한다.
 * 
 * 이 차이는 소스코드에서 존재하는 클래스와 실행 시점에 존재하는 객체의 차이와도 같다.
 */
object c08_i03 extends App {
  // 어떤 수에 1을 더하는 함수 리터럴의 간단한 예는 다음과 같다.
  (x: Int) => x + 1
  
  // => 기호는 왼쪽의 내용(임의의 정수 x)을 오른쪽의 내용(x+1)으로 변환하는 함수라는 표시다.
  // 따라서 위 코드는 정수 x를 x+1로 매핑하는 함수다.
  
  // 함수 값은 객체이기 때문에 원하면 변수에 저장 가능. 동시에 함수이기도 함.
  var increase = (x: Int) => x + 1
  println(increase(10))
  
  increase = (x: Int) => x + 9999
  println(increase(1))
  
  // 둘 이상의 문장이 필요하다면 중괄호로 감싸고, 리턴 값은 마지막 표현식이 된다.
  increase = (x: Int) => {
    println("we")
    println("are")
    println("here!")
    x+1
  }
  println(increase(10))
  
  // 모든 컬렉션은 foreach 메소드를 제공하는데, 인자로 함수를 넘긴다. 그리고 그 함수에는
  // 컬렉션의 각 요소를 인자로 넘긴다.
  val someNumbers = List(-11, -10, 0, 5, 10)
  someNumbers.foreach((x: Int) => println(x))
  //someNumbers.foreach(println)
  someNumbers.filter((x: Int) => x > 0)
  
}